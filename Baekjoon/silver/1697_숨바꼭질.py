import sys
# input.txt 파일은 현재 파이썬 파일과 같은 경로에 위치
sys.stdin = open("input.txt","r")
# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <문제>
# : 1697 _ 숨바꼭질
# https://www.acmicpc.net/problem/1697
# <등급>
# : 실버 1
    
# <내가 파악한 요구사항>
# : 그래프 이론

# <실제 요구사항>
# : 그래프 이론, 그래프 탐색
#   너비 우선 탐색    
# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <수도코드>
'''
n(수빈 위치),k(동생 위치) 를 입력 받음 
현재 수빈이의 위치가 x일때
걷기 = 1초 / x-1 or x+1
순간이동 = 1초 / 2*x



'''
# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <문제풀이>
def find_sister():
    visited = [0]*(k+1)
    
    for i in range(n+1):
        visited[i] = 1




n, k = map(int, input().split())


# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <정답 및 다른풀이>
from collections import deque

def bfs(start, target):
    # 방문 여부와 거리 기록을 위한 배열
    max_position = 100001  # 문제에서 주어진 최대 좌표값
    visited = [-1] * max_position  # -1은 방문하지 않은 상태를 의미
    visited[start] = 0  # 시작 위치의 시간은 0으로 설정

    queue = deque([start])  # BFS 큐 초기화

    while queue:
        current = queue.popleft()  # 현재 위치

        # 목표 위치에 도달하면 시간 반환
        if current == target:
            return visited[current]

        # 이동 가능한 세 가지 경우 탐색
        for next_pos in (current - 1, current + 1, current * 2):
            # 다음 위치가 범위 내에 있고 방문하지 않은 경우
            if 0 <= next_pos < max_position and visited[next_pos] == -1:
                visited[next_pos] = visited[current] + 1  # 시간 갱신
                queue.append(next_pos)  # 다음 위치를 큐에 추가

# 입력 처리
N, K = map(int, input().split())
print(bfs(N, K))
# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <문제를 통한 학습 내용>
'''
BFS()
BFS(너비 우선 탐색, Breadth-First Search)알고리즘은
그래프 또는 트리에서의 탐색 문제를 해결하는 데 유용합니다.
BFS를 사용하여 문제를 해결할 때,
아래의 접근 방법을 따르면 효율적으로 문제를 풀 수 있습니다:

• 그래프 탐색인지 확인: 문제가 그래프나 트리 구조에서 시작점에서 도착점으로의 경로를 탐색하거나 특정 조건을 만족하는 경로를 찾는 것인지 확인합니다.
• 입력과 출력:
    • 입력: 노드, 간선 정보 또는 2D/3D 배열 등이 주어질 수 있습니다.    
    • 출력: 탐색 결과, 최단 거리, 특정 조건을 만족하는 노드/경로 등.
• BFS가 적합한지 판단: 다음과 같은 경우 BFS를 고려합니다.
    • 최단 경로를 찾아야 할 때 (가중치가 없는 그래프).
    • 모든 노드를 레벨 순으로 탐색해야 할 때.
'''