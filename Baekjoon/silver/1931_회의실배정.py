import sys
# input.txt 파일은 현재 파이썬 파일과 같은 경로에 위치
sys.stdin = open("input.txt","r")
# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <문제>
# : 1931 _ 회의실 배정
# https://www.acmicpc.net/problem/1931
# <등급>
# : 실버1
    
# <내가 파악한 요구사항>
# : 정렬

# <실제 요구사항>
# : 정렬, 그리디 알고리즘
    
# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <수도코드>
'''
n개의 회의의 수 입력 받음.
각 회의 i에 대해 시작시간, 종료시간 입력
예외) 회의 시작, 종료시간이 같을시 시작과 동시에 종료

각 회의시간을 시작시간일때

1.	입력받은 회의를 종료 시간 기준으로 정렬합니다.
2.	회의를 순회하며, 다음 조건을 확인합니다:
    • 현재 회의의 시작 시간이 이전 회의의 종료 시간보다 크거나 같으면 회의를 선택.
    • 선택한 회의의 개수를 증가시키고, 종료 시간을 업데이트.

'''
# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <문제풀이>

n = int(input())
meetings = [tuple(map(int, input().split())) for _ in range(n)]
meetings.sort(key=lambda x: (x[1], x[0]))

count = 0
end_time = 0

for start, end in meetings:
    if start >= end_time:
        count +=1
        end_time = end
        
print(count)


# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <정답 및 다른풀이>
'''
# 입력 처리
n = int(input())
meetings = [tuple(map(int, input().split())) for _ in range(n)]

# 종료 시간 기준 정렬 (종료 시간이 같으면 시작 시간 기준 정렬)
meetings.sort(key=lambda x: (x[1], x[0]))

# 그리디 알고리즘
count = 0
end_time = 0  # 가장 최근 선택된 회의의 종료 시간

for start, end in meetings:
    if start >= end_time:  # 현재 회의가 이전 회의 종료 시간 이후에 시작할 수 있다면
        count += 1
        end_time = end  # 현재 회의의 종료 시간을 업데이트

print(count)
'''
# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <문제를 통한 학습 내용>