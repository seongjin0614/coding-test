import sys
# input.txt 파일은 현재 파이썬 파일과 같은 경로에 위치
sys.stdin = open("input.txt","r")
# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <문제>
# : 1966 _ 프린터 큐
# https://www.acmicpc.net/problem/1966
# <등급>
# : 실버3
    
# <내가 파악한 요구사항>
# : 큐

# <실제 요구사항>
# : 큐, 구현, 시뮬레이션, 자료구조
    
# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <수도코드>
'''
t(테스트케이스)를 입력 받음
n(문서의 개수), m(몇번째에 놓여 있는지 궁금한 문서) 입력받음
중요도를 입력받음

m문서가 몇번째로 인쇄되는지 출력


문제 풀이 과정
1. 큐 초기화:
    • (문서 중요도, 인덱스) 형태로 큐에 문서를 넣습니다.
    • 문서의 중요도를 통해 우선순위를 판단.
    • 인덱스를 통해 특정 문서(M)를 추적.
2. 우선순위 확인:
    • 큐의 첫 번째 문서의 중요도가 최댓값인지 확인합니다.
    • 만약 최댓값이 아니면, 큐의 뒤로 보냅니다.
    • 최댓값이라면 출력합니다.
3. 목표 문서 확인:
    • 출력된 문서가 목표 문서(M)라면, 현재 출력 순서를 반환합니다.


'''
# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <문제풀이>


# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <정답 및 다른풀이>
ㄴ
from collections import deque

def printer_queue(priorities, M):
    documents = deque([(priority, idx) for idx, priority in enumerate(priorities)])
    order = 0  # 출력 순서

    while documents:
        # 가장 높은 우선순위 확인
        if any(priority > documents[0][0] for priority, _ in documents):
            documents.append(documents.popleft())  # 뒤로 보냄
        else:
            # 출력 가능
            order += 1
            if documents.popleft()[1] == M:  # 목표 문서인지 확인
                return order

# 입력 처리
T = int(input())  # 테스트 케이스 수
for _ in range(T):
    N, M = map(int, input().split())
    priorities = list(map(int, input().split()))
    print(printer_queue(priorities, M))

# ------------------------------------------------------------------------------------------------------------------------------------------------   
# <문제를 통한 학습 내용>
'''
enumerate()
- 파이썬 내장 함수로, 반복 가능한(iterable) 객체에 대해 인덱스와 해당 요소를 동시에 제공하는 역할을 합니다.
- 주로 for 루프와 함께 사용

1. 기본 사용법
enumerate(iterable, start=0)
 • iterable: 리스트, 튜플, 문자열 등 반복 가능한 객체.
 • start: 인덱스의 시작 값을 지정. 기본값은 0.

2. 반환값
 • enumerate() 함수는 (인덱스, 값) 형태의 튜플을 반복(iterable)하는 iterator 객체를 반환합니다.
 • 이를 for 루프에서 풀어서 사용하거나, 리스트로 변환할 수 있습니다.
'''